name: Local Build and Distribute

on:
  push:
    branches:
      - local-runner
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare Environment
    runs-on: self-hosted
    outputs:
      new_ios_build: ${{ steps.bump.outputs.new_ios_build }}
      new_android_code: ${{ steps.bump.outputs.new_android_code }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: bump
        run: |
          content=$(cat app.json)
          ios_build=$(echo $content | jq -r '.expo.ios.buildNumber')
          new_ios_build=$((ios_build + 1))
          android_code=$(echo $content | jq -r '.expo.android.versionCode')
          new_android_code=$((android_code + 1))
          content=$(echo $content | jq --arg ios "$new_ios_build" --arg android "$new_android_code" '.expo.ios.buildNumber = $ios | .expo.android.versionCode = $android')
          echo $content > app.json
          echo "new_ios_build=$new_ios_build" >> $GITHUB_OUTPUT
          echo "new_android_code=$new_android_code" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add app.json
          git commit -m "Bump iOS build number to ${{ steps.bump.outputs.new_ios_build }} and Android version code to ${{ steps.bump.outputs.new_android_code }}"
          git push

      - name: Setup EAS
        run: npm install -g eas-cli

  build-ios:
    needs: prepare
    name: Build iOS
    runs-on: self-hosted
    outputs:
      ipa_path: ${{ steps.find-ipa.outputs.path }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Install dependencies
        run: npm ci
      - name: Setup EAS
        run: npm install -g eas-cli
      - name: Setup EAS Build
        env:
          EXPO_APPLE_TEAM_ID: ${{ secrets.EXPO_APPLE_TEAM_ID }}
          EXPO_APPLE_DISTRIBUTION_CERT_BASE64: ${{ secrets.EXPO_APPLE_DISTRIBUTION_CERT_BASE64 }}
          EXPO_APPLE_DISTRIBUTION_CERT_PASSWORD: ${{ secrets.EXPO_APPLE_DISTRIBUTION_CERT_PASSWORD }}
          EXPO_APPLE_PROVISIONING_PROFILE_BASE64: ${{ secrets.EXPO_APPLE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p eas-builds
          echo $EXPO_APPLE_DISTRIBUTION_CERT_BASE64 | base64 --decode > eas-builds/dist-cert.p12
          echo $EXPO_APPLE_PROVISIONING_PROFILE_BASE64 | base64 --decode > eas-builds/profile.mobileprovision
          echo '{
            "ios": {
              "distributionCertificate": {
                "path": "eas-builds/dist-cert.p12",
                "password": "'$EXPO_APPLE_DISTRIBUTION_CERT_PASSWORD'"
              },
              "provisioningProfilePath": "eas-builds/profile.mobileprovision"
            }
          }' > credentials.json
      - name: Build iOS
        env:
          EXPO_APPLE_TEAM_ID: ${{ secrets.EXPO_APPLE_TEAM_ID }}
        run: eas build --platform ios --local --non-interactive --wait
      - name: Find IPA Path
        id: find-ipa
        run: echo "::set-output name=path::$(find . -name "*.ipa")"
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-artifact
          path: $(find . -name "*.ipa")

  build-android:
    needs: prepare
    name: Build Android
    runs-on: self-hosted
    outputs:
      aab_path: ${{ steps.find-aab.outputs.path }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Install dependencies
        run: npm ci
      - name: Setup EAS
        run: npm install -g eas-cli
      - name: Setup EAS Build
        env:
          EXPO_ANDROID_KEYSTORE_BASE64: ${{ secrets.EXPO_ANDROID_KEYSTORE_BASE64 }}
          EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
          EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
          EXPO_ANDROID_KEYSTORE_ALIAS: ${{ secrets.EXPO_ANDROID_KEYSTORE_ALIAS }}
        run: |
          mkdir -p eas-builds
          echo $EXPO_ANDROID_KEYSTORE_BASE64 | base64 --decode > eas-builds/android-keystore.jks
          echo '{
            "android": {
              "keystore": {
                "keystorePath": "eas-builds/android-keystore.jks",
                "keystorePassword": "'$EXPO_ANDROID_KEYSTORE_PASSWORD'",
                "keyAlias": "'$EXPO_ANDROID_KEYSTORE_ALIAS'",
                "keyPassword": "'$EXPO_ANDROID_KEY_PASSWORD'"
              }
            }
          }' > credentials.json
      - name: Build Android
        env:
          EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
          EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
          EXPO_ANDROID_KEYSTORE_ALIAS: ${{ secrets.EXPO_ANDROID_KEYSTORE_ALIAS }}
        run: eas build --platform android --local --non-interactive --wait
      - name: Find AAB Path
        id: find-aab
        run: echo "::set-output name=path::$(find . -name "*.aab")"
      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-artifact
          path: $(find . -name "*.aab")

  submit:
    needs: [prepare, build-ios, build-android]
    name: Submit to App Stores
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Install dependencies
        run: npm ci
      - name: Setup EAS
        run: npm install -g eas-cli
      - name: Download IPA and AAB Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ios-artifact
      - name: List files in current directory (debug)
        run: ls -la
      - name: Download Android Artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-artifact
      - name: List files in current directory (debug)
        run: ls -la
      - name: Submit to App Stores
        env:
          EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
          EXPO_APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.EXPO_APPLE_APP_SPECIFIC_PASSWORD }}
          EXPO_ASC_APP_ID: ${{ secrets.EXPO_ASC_APP_ID }}
          EXPO_APPLE_TEAM_ID: ${{ secrets.EXPO_APPLE_TEAM_ID }}
          GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' > google-service-account-key.json
          ipa_path=$(find . -name "*.ipa")
          aab_path=$(find . -name "*.aab")
          echo "IPA path: $ipa_path"
          echo "AAB path: $aab_path"
          if [ -z "$ipa_path" ]; then
            echo "No IPA file found."
            exit 1
          fi
          if [ -z "$aab_path" ]; then
            echo "No AAB file found."
            exit 1
          fi
          eas submit --platform ios --path "$ipa_path"
          eas submit --platform android --path "$aab_path"